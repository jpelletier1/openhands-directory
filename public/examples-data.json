[
  {
    "id": "api-client",
    "title": "REST API Client Skill",
    "author": "OpenHands Team",
    "category": "skills",
    "description": "Generic REST API client with authentication, retries, and response parsing.",
    "code": "# REST API Client Skill\n\n## Overview\n\nThe REST API Client skill provides a robust and production-ready way to interact with REST APIs. It includes automatic retry logic, connection pooling, and proper error handling to ensure reliable API communications.\n\n## Features\n\n- **Automatic Retries**: Built-in retry mechanism with exponential backoff\n- **Connection Pooling**: Efficient connection reuse for better performance\n- **Error Handling**: Proper HTTP error detection and reporting\n- **Flexible Authentication**: Support for custom headers including auth tokens\n- **Multiple HTTP Methods**: Support for GET, POST, PUT, DELETE, and more\n\n## Parameters\n\n### `url` (string, required)\nThe API endpoint URL to call.\n\n**Example:** `\"https://api.example.com/v1/users\"`\n\n### `method` (string, optional)\nThe HTTP method to use. Defaults to `'GET'`.\n\n**Options:** `'GET'`, `'POST'`, `'PUT'`, `'DELETE'`, `'PATCH'`\n\n### `headers` (object, optional)\nCustom HTTP headers to include in the request.\n\n**Example:**\n```json\n{\n  \"Authorization\": \"Bearer YOUR_TOKEN\",\n  \"Content-Type\": \"application/json\"\n}\n```\n\n### `data` (object, optional)\nRequest body data for POST, PUT, or PATCH requests. Will be automatically serialized to JSON.\n\n**Example:**\n```json\n{\n  \"name\": \"John Doe\",\n  \"email\": \"john@example.com\"\n}\n```\n\n## Usage\n\n```python\n# GET request\nresponse = call_api(\"https://api.example.com/v1/users\")\n\n# POST request with data\nresponse = call_api(\n    url=\"https://api.example.com/v1/users\",\n    method=\"POST\",\n    headers={\"Authorization\": \"Bearer TOKEN\"},\n    data={\"name\": \"John\", \"email\": \"john@example.com\"}\n)\n```\n\n## Implementation\n\n```python\nimport requests\nfrom requests.adapters import HTTPAdapter\nfrom urllib3.util.retry import Retry\n\ndef call_api(url, method='GET', headers=None, data=None):\n    session = requests.Session()\n    retry = Retry(total=3, backoff_factor=0.5)\n    adapter = HTTPAdapter(max_retries=retry)\n    session.mount('http://', adapter)\n    session.mount('https://', adapter)\n\n    response = session.request(method, url, headers=headers, json=data)\n    response.raise_for_status()\n\n    return response.json()\n```\n\n## Return Value\n\nReturns the parsed JSON response from the API as a Python dictionary or list.\n\n## Error Handling\n\n- Raises `HTTPError` for 4xx and 5xx status codes\n- Automatically retries on connection errors and timeouts\n- Uses exponential backoff between retries (0.5s, 1s, 2s)\n\n## Dependencies\n\n- `requests`: HTTP library for Python\n- `urllib3`: HTTP client (included with requests)\n\nInstall with:\n```bash\npip install requests\n```",
    "file": "api-client.md"
  },
  {
    "id": "data-analyzer",
    "title": "Data Analyzer Skill",
    "author": "Jane Smith",
    "category": "skills",
    "description": "Analyze CSV and JSON data files with statistical operations including mean, median, standard deviation, and generate summary reports.",
    "code": "# Data Analyzer Skill\n\n## Overview\n\nThe Data Analyzer skill provides powerful statistical analysis capabilities for CSV data files. It leverages pandas and numpy to perform common statistical operations and generate insights from your datasets.\n\n## Features\n\n- **Multiple Statistical Operations**: Calculate mean, median, and standard deviation\n- **CSV Support**: Read and analyze CSV files\n- **Column-wise Analysis**: Perform operations on all numeric columns\n- **Flexible Operation Selection**: Choose which statistics to compute\n\n## Parameters\n\n### `file_path` (string, required)\nPath to the CSV data file to analyze.\n\n**Example:** `\"./data/sales_data.csv\"`\n\n### `operations` (array, required)\nList of statistical operations to perform on the dataset.\n\n**Options:**\n- `'mean'`: Calculate the average value for each numeric column\n- `'median'`: Calculate the median value for each numeric column\n- `'std'`: Calculate the standard deviation for each numeric column\n\n**Example:**\n```json\n[\"mean\", \"median\", \"std\"]\n```\n\n## Usage\n\n```python\n# Analyze a dataset with multiple operations\nresults = analyze(\n    file_path=\"./data/sales_data.csv\",\n    operations=[\"mean\", \"median\", \"std\"]\n)\n\n# Access specific statistics\nprint(f\"Average sales: {results['mean']['sales']}\")\nprint(f\"Median price: {results['median']['price']}\")\n```\n\n## Implementation\n\n```python\nimport pandas as pd\nimport numpy as np\n\ndef analyze(file_path, operations):\n    df = pd.read_csv(file_path)\n    \n    results = {}\n    for op in operations:\n        if op == 'mean':\n            results['mean'] = df.mean().to_dict()\n        elif op == 'median':\n            results['median'] = df.median().to_dict()\n        elif op == 'std':\n            results['std'] = df.std().to_dict()\n    \n    return results\n```\n\n## Return Value\n\nReturns a dictionary where each key corresponds to a statistical operation, and the value is another dictionary mapping column names to their calculated statistics.\n\n**Example output:**\n```json\n{\n  \"mean\": {\n    \"price\": 29.99,\n    \"quantity\": 150.5,\n    \"revenue\": 4498.50\n  },\n  \"median\": {\n    \"price\": 24.99,\n    \"quantity\": 120.0,\n    \"revenue\": 2999.88\n  },\n  \"std\": {\n    \"price\": 15.32,\n    \"quantity\": 75.8,\n    \"revenue\": 2250.10\n  }\n}\n```\n\n## Notes\n\n- Only numeric columns are analyzed; non-numeric columns are automatically skipped\n- Empty or missing values are handled by pandas' default behavior (typically ignored)\n- Large datasets are efficiently processed using pandas' optimized operations\n\n## Dependencies\n\n- `pandas`: Data manipulation and analysis library\n- `numpy`: Numerical computing library\n\nInstall with:\n```bash\npip install pandas numpy\n```",
    "file": "data-analyzer.md"
  },
  {
    "id": "email-sender",
    "title": "Email Sender Skill",
    "author": "OpenHands Team",
    "category": "skills",
    "description": "Send emails using SMTP protocol with support for attachments and HTML content.",
    "code": "# Email Sender Skill\n\n## Overview\n\nThe Email Sender skill provides a simple interface for sending emails programmatically using the SMTP protocol. It supports both plain text and HTML email content, making it suitable for notifications, reports, and automated communications.\n\n## Features\n\n- **Plain Text & HTML Support**: Send both plain text and HTML-formatted emails\n- **SMTP Protocol**: Standard email sending using SMTP\n- **Multi-part Messages**: Proper MIME formatting for email clients\n- **Simple API**: Easy-to-use interface for quick email sending\n\n## Parameters\n\n### `to` (string, required)\nThe recipient's email address.\n\n**Example:** `\"user@example.com\"`\n\n### `subject` (string, required)\nThe email subject line.\n\n**Example:** `\"Monthly Report - January 2024\"`\n\n### `body` (string, required)\nThe email body content. Can be plain text or HTML depending on the `html` parameter.\n\n**Plain text example:**\n```\n\"Hello,\\n\\nThis is a test email.\\n\\nBest regards,\\nYour Team\"\n```\n\n**HTML example:**\n```html\n\"<html><body><h1>Hello</h1><p>This is a <strong>test</strong> email.</p></body></html>\"\n```\n\n### `html` (boolean, optional)\nWhether the body content is HTML. Defaults to `False` (plain text).\n\n**Example:** `true` or `false`\n\n## Usage\n\n```python\n# Send a plain text email\nsend_email(\n    to=\"user@example.com\",\n    subject=\"Hello from OpenHands\",\n    body=\"This is a plain text message.\"\n)\n\n# Send an HTML email\nsend_email(\n    to=\"user@example.com\",\n    subject=\"Monthly Report\",\n    body=\"<h1>Report</h1><p>Here are the results...</p>\",\n    html=True\n)\n```\n\n## Implementation\n\n```python\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\n\ndef send_email(to, subject, body, html=False):\n    msg = MIMEMultipart('alternative')\n    msg['Subject'] = subject\n    msg['To'] = to\n\n    content_type = 'html' if html else 'plain'\n    msg.attach(MIMEText(body, content_type))\n\n    with smtplib.SMTP('localhost') as server:\n        server.send_message(msg)\n```\n\n## Configuration\n\nThis skill assumes you have an SMTP server running on `localhost` (port 25). For production use, you may want to configure:\n\n- **SMTP Server**: Change `'localhost'` to your SMTP server address\n- **Port**: Add port parameter (e.g., 587 for TLS, 465 for SSL)\n- **Authentication**: Add username/password for authenticated SMTP\n- **TLS/SSL**: Enable encryption for secure transmission\n\n## Example with Authentication\n\n```python\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\n\ndef send_email(to, subject, body, html=False):\n    msg = MIMEMultipart('alternative')\n    msg['Subject'] = subject\n    msg['To'] = to\n    msg['From'] = \"noreply@example.com\"\n\n    content_type = 'html' if html else 'plain'\n    msg.attach(MIMEText(body, content_type))\n\n    with smtplib.SMTP('smtp.gmail.com', 587) as server:\n        server.starttls()\n        server.login('your-email@gmail.com', 'your-password')\n        server.send_message(msg)\n```\n\n## Dependencies\n\nPart of Python's standard library - no additional installation required.\n\n## Notes\n\n- Ensure your SMTP server is properly configured before use\n- For Gmail, you may need to use an app-specific password\n- Consider rate limiting for bulk email sending\n- Add proper error handling for production use",
    "file": "email-sender.md"
  },
  {
    "id": "file-organizer",
    "title": "File Organizer Skill",
    "author": "Mike Johnson",
    "category": "skills",
    "description": "Automatically organize files in a directory by extension, date, or custom criteria. Supports batch operations and undo functionality.",
    "code": "# File Organizer Skill\n\n## Overview\n\nThe File Organizer skill helps you automatically organize files in a directory based on various criteria. It's perfect for cleaning up download folders, organizing project files, or maintaining structured file systems.\n\n## Features\n\n- **Extension-based Organization**: Group files by their file extensions\n- **Automatic Directory Creation**: Creates subdirectories as needed\n- **Safe File Moving**: Uses Python's built-in file operations\n- **Batch Processing**: Handles multiple files in a single operation\n\n## Parameters\n\n### `directory` (string, required)\nThe path to the directory containing files to organize.\n\n**Example:** `\"/Users/john/Downloads\"` or `\"./documents\"`\n\n### `mode` (string, optional)\nThe organization mode to use. Defaults to `'extension'`.\n\n**Options:**\n- `'extension'`: Organize files by their file extension (e.g., .pdf, .jpg, .txt)\n- `'date'`: Organize by file modification date (not yet implemented)\n- `'size'`: Organize by file size (not yet implemented)\n\n## Usage\n\n```python\n# Organize files by extension\nresult = organize(\n    directory=\"/Users/john/Downloads\",\n    mode=\"extension\"\n)\n\n# Check the result\nprint(result['status'])  # Output: 'completed'\n```\n\n## Implementation\n\n```python\nimport os\nimport shutil\nfrom pathlib import Path\n\ndef organize(directory, mode='extension'):\n    path = Path(directory)\n    \n    for file in path.iterdir():\n        if file.is_file():\n            if mode == 'extension':\n                ext = file.suffix[1:] or 'no_extension'\n                dest_dir = path / ext\n                dest_dir.mkdir(exist_ok=True)\n                shutil.move(str(file), str(dest_dir / file.name))\n    \n    return {'status': 'completed'}\n```\n\n## Return Value\n\nReturns a dictionary with the operation status.\n\n**Example output:**\n```json\n{\n  \"status\": \"completed\"\n}\n```\n\n## Example: Before and After\n\n**Before:**\n```\nDownloads/\n├── report.pdf\n├── photo1.jpg\n├── photo2.jpg\n├── notes.txt\n└── data.csv\n```\n\n**After (extension mode):**\n```\nDownloads/\n├── pdf/\n│   └── report.pdf\n├── jpg/\n│   ├── photo1.jpg\n│   └── photo2.jpg\n├── txt/\n│   └── notes.txt\n└── csv/\n    └── data.csv\n```\n\n## Notes\n\n- **Files without extensions** are moved to a `no_extension` directory\n- **Existing files** with the same name will raise an error; ensure unique filenames\n- **Subdirectories** are not processed; only files in the root directory are organized\n- **Symlinks** and **hidden files** are treated as regular files\n\n## Safety Considerations\n\n- Always test on a backup directory first\n- Verify the directory path before running\n- Ensure you have write permissions for the directory\n- Consider adding a dry-run mode for preview\n\n## Future Enhancements\n\nAdditional organization modes could include:\n- **Date-based**: Organize by creation or modification date (e.g., 2024-01, 2024-02)\n- **Size-based**: Organize by file size ranges (small, medium, large)\n- **Name-based**: Organize by file name patterns or prefixes\n- **Undo functionality**: Keep track of moves to allow reversal\n\n## Dependencies\n\nPart of Python's standard library - no additional installation required.",
    "file": "file-organizer.md"
  },
  {
    "id": "image-processor",
    "title": "Image Processor Skill",
    "author": "OpenHands Team",
    "category": "skills",
    "description": "Process and transform images with operations like resize, crop, and filter application using PIL.",
    "code": "# Image Processor Skill\n\n## Overview\n\nThe Image Processor skill provides powerful image manipulation capabilities using the Python Imaging Library (PIL/Pillow). It supports common image operations like resizing, cropping, rotating, and applying filters.\n\n## Features\n\n- **Multiple Operations**: Resize, crop, rotate, and filter images\n- **Format Support**: Works with all common image formats (JPEG, PNG, GIF, BMP, etc.)\n- **Filter Effects**: Apply built-in PIL filters for image enhancement\n- **Flexible Parameters**: Each operation has customizable parameters\n\n## Parameters\n\n### `image_path` (string, required)\nThe file path to the input image.\n\n**Example:** `\"./images/photo.jpg\"`\n\n### `operation` (string, required)\nThe image operation to perform.\n\n**Options:**\n- `'resize'`: Change image dimensions\n- `'crop'`: Extract a rectangular region\n- `'rotate'`: Rotate the image by an angle\n- `'filter'`: Apply an image filter\n\n### `params` (object, required)\nOperation-specific parameters. The required fields depend on the chosen operation.\n\n## Operations\n\n### Resize\n\nResize the image to specific dimensions.\n\n**Parameters:**\n```json\n{\n  \"width\": 800,\n  \"height\": 600\n}\n```\n\n**Usage:**\n```python\nimg = process_image(\n    image_path=\"photo.jpg\",\n    operation=\"resize\",\n    params={\"width\": 800, \"height\": 600}\n)\n```\n\n### Crop\n\nExtract a rectangular region from the image.\n\n**Parameters:**\n```json\n{\n  \"left\": 100,\n  \"top\": 100,\n  \"right\": 400,\n  \"bottom\": 400\n}\n```\n\n**Usage:**\n```python\nimg = process_image(\n    image_path=\"photo.jpg\",\n    operation=\"crop\",\n    params={\"left\": 100, \"top\": 100, \"right\": 400, \"bottom\": 400}\n)\n```\n\n### Rotate\n\nRotate the image by a specified angle (in degrees).\n\n**Parameters:**\n```json\n{\n  \"angle\": 90\n}\n```\n\n**Usage:**\n```python\nimg = process_image(\n    image_path=\"photo.jpg\",\n    operation=\"rotate\",\n    params={\"angle\": 90}\n)\n```\n\n### Filter\n\nApply a PIL ImageFilter to the image.\n\n**Parameters:**\n```json\n{\n  \"filter\": \"BLUR\"\n}\n```\n\n**Available filters:**\n- `\"BLUR\"`: Blur the image\n- `\"CONTOUR\"`: Find contours in the image\n- `\"DETAIL\"`: Enhance detail\n- `\"EDGE_ENHANCE\"`: Enhance edges\n- `\"SHARPEN\"`: Sharpen the image\n- `\"SMOOTH\"`: Smooth the image\n\n**Usage:**\n```python\nimg = process_image(\n    image_path=\"photo.jpg\",\n    operation=\"filter\",\n    params={\"filter\": \"SHARPEN\"}\n)\n```\n\n## Implementation\n\n```python\nfrom PIL import Image, ImageFilter\n\ndef process_image(image_path, operation, params):\n    img = Image.open(image_path)\n\n    if operation == 'resize':\n        img = img.resize((params['width'], params['height']))\n    elif operation == 'crop':\n        img = img.crop((params['left'], params['top'], params['right'], params['bottom']))\n    elif operation == 'rotate':\n        img = img.rotate(params['angle'])\n    elif operation == 'filter':\n        img = img.filter(getattr(ImageFilter, params['filter']))\n\n    return img\n```\n\n## Return Value\n\nReturns a PIL Image object that can be:\n- Saved to disk: `img.save('output.jpg')`\n- Further processed with additional operations\n- Converted to other formats: `img.convert('RGB')`\n- Displayed: `img.show()`\n\n## Example Workflow\n\n```python\n# Open and process an image\nimg = process_image(\"photo.jpg\", \"resize\", {\"width\": 1024, \"height\": 768})\n\n# Save the result\nimg.save(\"photo_resized.jpg\", quality=95)\n\n# Chain operations\nimg = process_image(\"photo.jpg\", \"crop\", {\"left\": 0, \"top\": 0, \"right\": 500, \"bottom\": 500})\nimg = img.filter(ImageFilter.SHARPEN)\nimg.save(\"photo_cropped_sharp.jpg\")\n```\n\n## Dependencies\n\n- `Pillow`: The Python Imaging Library\n\nInstall with:\n```bash\npip install Pillow\n```\n\n## Notes\n\n- The original image file is not modified; operations return a new Image object\n- For resize, the aspect ratio is not preserved by default\n- Rotation may result in transparent or black corners\n- Some operations may affect image quality; use appropriate quality settings when saving",
    "file": "image-processor.md"
  },
  {
    "id": "pdf-generator",
    "title": "PDF Generator Skill",
    "author": "OpenHands Team",
    "category": "skills",
    "description": "Generate PDF documents from text, HTML, or templates with custom styling.",
    "code": "# PDF Generator Skill\n\n## Overview\n\nThe PDF Generator skill enables you to create PDF documents programmatically from text content. It uses the ReportLab library to generate professional-looking PDFs with custom formatting.\n\n## Features\n\n- **Text to PDF**: Convert plain text content to PDF format\n- **Multi-line Support**: Automatically handles line breaks and formatting\n- **Standard Page Sizes**: Uses letter-size pages by default\n- **Simple API**: Easy-to-use interface for quick PDF generation\n\n## Parameters\n\n### `content` (string, required)\nThe text content to convert to PDF. Supports multi-line text with `\\n` line breaks.\n\n**Example:**\n```\n\"Title: My Document\\n\\nThis is the first paragraph.\\n\\nThis is the second paragraph.\"\n```\n\n### `output_path` (string, required)\nThe file path where the generated PDF should be saved.\n\n**Example:** `\"./reports/document.pdf\"`\n\n### `format` (string, optional)\nThe input format type. Defaults to `'text'`.\n\n**Options:**\n- `'text'`: Plain text (currently supported)\n- `'html'`: HTML content (planned)\n- `'markdown'`: Markdown content (planned)\n\n## Usage\n\n```python\n# Generate a simple PDF\noutput_file = generate_pdf(\n    content=\"Hello World\\n\\nThis is my first PDF document.\",\n    output_path=\"./output/hello.pdf\",\n    format=\"text\"\n)\n\nprint(f\"PDF saved to: {output_file}\")\n```\n\n## Implementation\n\n```python\nfrom reportlab.lib.pagesizes import letter\nfrom reportlab.pdfgen import canvas\n\ndef generate_pdf(content, output_path, format='text'):\n    c = canvas.Canvas(output_path, pagesize=letter)\n    width, height = letter\n\n    y = height - 50\n    for line in content.split('\\n'):\n        c.drawString(50, y, line)\n        y -= 20\n\n    c.save()\n    return output_path\n```\n\n## Return Value\n\nReturns the path to the generated PDF file (same as `output_path` parameter).\n\n## Example\n\n```python\ncontent = \"\"\"\nMONTHLY REPORT\nJanuary 2024\n\nSales Summary:\n- Total Revenue: $125,000\n- New Customers: 45\n- Customer Satisfaction: 94%\n\nNotes:\nStrong performance this month.\n\"\"\"\n\npdf_path = generate_pdf(\n    content=content,\n    output_path=\"./reports/january_2024.pdf\"\n)\n```\n\n## Page Specifications\n\n- **Page Size**: US Letter (8.5\" × 11\")\n- **Margins**: 50 points from left edge, 50 points from top\n- **Line Height**: 20 points between lines\n- **Font**: Default Helvetica\n\n## Limitations\n\n- No automatic page overflow handling (text may go off page)\n- Fixed font and styling\n- No support for images or tables\n- Limited to basic text rendering\n\n## Enhanced Version\n\nFor more advanced PDF generation, consider extending with:\n\n```python\nfrom reportlab.lib.pagesizes import letter\nfrom reportlab.pdfgen import canvas\nfrom reportlab.lib.units import inch\nfrom reportlab.lib.styles import getSampleStyleSheet\nfrom reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer\n\ndef generate_pdf_advanced(content, output_path, title=None):\n    doc = SimpleDocTemplate(output_path, pagesize=letter)\n    styles = getSampleStyleSheet()\n    story = []\n    \n    if title:\n        story.append(Paragraph(title, styles['Title']))\n        story.append(Spacer(1, 0.2*inch))\n    \n    for line in content.split('\\n'):\n        if line.strip():\n            story.append(Paragraph(line, styles['Normal']))\n            story.append(Spacer(1, 0.1*inch))\n    \n    doc.build(story)\n    return output_path\n```\n\n## Dependencies\n\n- `reportlab`: PDF generation library\n\nInstall with:\n```bash\npip install reportlab\n```\n\n## Notes\n\n- Ensure the output directory exists before calling the function\n- For production use, add error handling and validation\n- Consider page overflow for longer documents\n- The function will overwrite existing files at `output_path`",
    "file": "pdf-generator.md"
  },
  {
    "id": "web-scraper",
    "title": "Web Scraper Skill",
    "author": "OpenHands Team",
    "category": "skills",
    "description": "A powerful web scraping skill that extracts data from websites using BeautifulSoup and requests libraries. Perfect for gathering structured data from HTML pages.",
    "code": "# Web Scraper Skill\n\n## Overview\n\nThe Web Scraper skill provides a simple and powerful way to extract structured data from HTML web pages. It uses the popular BeautifulSoup and requests libraries to fetch and parse web content.\n\n## Features\n\n- HTTP request handling with the `requests` library\n- CSS selector-based data extraction\n- Clean and structured output format\n- Support for multiple selectors in a single request\n\n## Parameters\n\n### `url` (string, required)\nThe URL of the web page to scrape.\n\n**Example:** `\"https://example.com/products\"`\n\n### `selectors` (object, required)\nA dictionary of CSS selectors for data extraction. Each key represents the name of the data field, and the value is the CSS selector to locate the elements.\n\n**Example:**\n```json\n{\n  \"titles\": \"h2.product-title\",\n  \"prices\": \"span.price\",\n  \"descriptions\": \"p.description\"\n}\n```\n\n## Usage\n\n```python\nresult = scrape(\n    url=\"https://example.com/products\",\n    selectors={\n        \"titles\": \"h2.product-title\",\n        \"prices\": \"span.price\"\n    }\n)\n```\n\n## Implementation\n\n```python\nimport requests\nfrom bs4 import BeautifulSoup\n\ndef scrape(url, selectors):\n    response = requests.get(url)\n    soup = BeautifulSoup(response.content, 'html.parser')\n    \n    results = {}\n    for key, selector in selectors.items():\n        elements = soup.select(selector)\n        results[key] = [el.text.strip() for el in elements]\n    \n    return results\n```\n\n## Return Value\n\nReturns a dictionary where each key corresponds to the selector name, and the value is a list of extracted text content.\n\n**Example output:**\n```json\n{\n  \"titles\": [\"Product 1\", \"Product 2\", \"Product 3\"],\n  \"prices\": [\"$19.99\", \"$29.99\", \"$39.99\"]\n}\n```\n\n## Dependencies\n\n- `requests`: For making HTTP requests\n- `beautifulsoup4`: For parsing HTML content\n\nInstall with:\n```bash\npip install requests beautifulsoup4\n```",
    "file": "web-scraper.md"
  },
  {
    "id": "database-server",
    "title": "PostgreSQL MCP Server",
    "author": "David Lee",
    "category": "mcp",
    "description": "MCP server for PostgreSQL database operations including queries, schema inspection, and transaction management with connection pooling.",
    "code": "{\n  \"mcpServers\": {\n    \"postgresql\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-postgres\"\n      ],\n      \"env\": {\n        \"DATABASE_URL\": \"postgresql://user:pass@localhost:5432/dbname\"\n      }\n    }\n  }\n}",
    "file": "database-server.yaml"
  },
  {
    "id": "filesystem-server",
    "title": "Filesystem MCP Server",
    "author": "OpenHands Team",
    "category": "mcp",
    "description": "Model Context Protocol server providing secure filesystem access with read/write operations, directory listing, and file search capabilities.",
    "code": "{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-filesystem\",\n        \"/path/to/allowed/directory\"\n      ]\n    }\n  }\n}",
    "file": "filesystem-server.yaml"
  },
  {
    "id": "github-server",
    "title": "GitHub MCP Server",
    "author": "Sarah Chen",
    "category": "mcp",
    "description": "Connect to GitHub API through MCP for repository management, issue tracking, pull requests, and code search across your organizations.",
    "code": "{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-github\"\n      ],\n      \"env\": {\n        \"GITHUB_TOKEN\": \"your_github_token_here\"\n      }\n    }\n  }\n}",
    "file": "github-server.yaml"
  },
  {
    "id": "google-drive-server",
    "title": "Google Drive MCP Server",
    "author": "OpenHands Team",
    "category": "mcp",
    "description": "MCP server for Google Drive access enabling file operations, sharing, and search.",
    "code": "name: google-drive\ndescription: Google Drive integration\ntools:\n  - list_files\n  - upload_file\n  - download_file\n  - share_file\n  - search_files\nconfig: |\n  {\n    \"mcpServers\": {\n      \"google-drive\": {\n        \"command\": \"npx\",\n        \"args\": [\"-y\", \"@modelcontextprotocol/server-gdrive\"],\n        \"env\": {\n          \"GOOGLE_CLIENT_ID\": \"${GOOGLE_CLIENT_ID}\",\n          \"GOOGLE_CLIENT_SECRET\": \"${GOOGLE_CLIENT_SECRET}\",\n          \"GOOGLE_REFRESH_TOKEN\": \"${GOOGLE_REFRESH_TOKEN}\"\n        }\n      }\n    }\n  }",
    "file": "google-drive-server.yaml"
  },
  {
    "id": "postgres-server",
    "title": "PostgreSQL MCP Server",
    "author": "OpenHands Team",
    "category": "mcp",
    "description": "MCP server for PostgreSQL database access with query execution and schema inspection.",
    "code": "name: postgres\ndescription: PostgreSQL database integration\ntools:\n  - execute_query\n  - list_tables\n  - describe_table\n  - get_schema\nconfig: |\n  {\n    \"mcpServers\": {\n      \"postgres\": {\n        \"command\": \"npx\",\n        \"args\": [\"-y\", \"@modelcontextprotocol/server-postgres\"],\n        \"env\": {\n          \"POSTGRES_CONNECTION_STRING\": \"${POSTGRES_CONNECTION_STRING}\"\n        }\n      }\n    }\n  }",
    "file": "postgres-server.yaml"
  },
  {
    "id": "puppeteer-server",
    "title": "Puppeteer MCP Server",
    "author": "OpenHands Team",
    "category": "mcp",
    "description": "MCP server for browser automation using Puppeteer for web scraping and testing.",
    "code": "name: puppeteer\ndescription: Browser automation with Puppeteer\ntools:\n  - navigate\n  - screenshot\n  - click\n  - fill_form\n  - evaluate\nconfig: |\n  {\n    \"mcpServers\": {\n      \"puppeteer\": {\n        \"command\": \"npx\",\n        \"args\": [\"-y\", \"@modelcontextprotocol/server-puppeteer\"]\n      }\n    }\n  }",
    "file": "puppeteer-server.yaml"
  },
  {
    "id": "slack-server",
    "title": "Slack MCP Server",
    "author": "OpenHands Team",
    "category": "mcp",
    "description": "MCP server for Slack integration enabling message sending, channel management, and workspace operations.",
    "code": "name: slack\ndescription: Slack workspace integration\ntools:\n  - send_message\n  - list_channels\n  - create_channel\n  - get_user_info\nconfig: |\n  {\n    \"mcpServers\": {\n      \"slack\": {\n        \"command\": \"npx\",\n        \"args\": [\"-y\", \"@modelcontextprotocol/server-slack\"],\n        \"env\": {\n          \"SLACK_BOT_TOKEN\": \"${SLACK_BOT_TOKEN}\",\n          \"SLACK_TEAM_ID\": \"${SLACK_TEAM_ID}\"\n        }\n      }\n    }\n  }",
    "file": "slack-server.yaml"
  },
  {
    "id": "async-operations",
    "title": "Async Operations SDK Example",
    "author": "Emily White",
    "category": "sdk",
    "description": "Demonstrates asynchronous agent operations for handling multiple tasks concurrently with proper error handling and result aggregation.",
    "code": "import asyncio\nfrom openhands import AsyncAgent\n\nasync def main():\n    agent = AsyncAgent(model=\"gpt-4\")\n    \n    tasks = [\n        agent.run(\"Analyze data.csv\"),\n        agent.run(\"Generate report from results\"),\n        agent.run(\"Create visualization\")\n    ]\n    \n    results = await asyncio.gather(*tasks)\n    \n    for i, result in enumerate(results):\n        print(f\"Task {i+1}: {result.output}\")\n\nif __name__ == \"__main__\":\n    asyncio.run(main())",
    "file": "async-operations.py"
  },
  {
    "id": "basic-agent",
    "title": "Basic Agent SDK Example",
    "author": "OpenHands Team",
    "category": "sdk",
    "description": "Simple example demonstrating how to create and run an OpenHands agent using the Python SDK with custom instructions and file operations.",
    "code": "from openhands import Agent\n\nagent = Agent(\n    model=\"gpt-4\",\n    instructions=\"You are a helpful coding assistant\"\n)\n\nresult = agent.run(\n    task=\"Create a Python function that calculates fibonacci numbers\",\n    workspace=\"/workspace\"\n)\n\nprint(result.output)",
    "file": "basic-agent.py"
  },
  {
    "id": "custom-tools",
    "title": "Custom Tools SDK Example",
    "author": "Alex Rodriguez",
    "category": "sdk",
    "description": "Advanced example showing how to extend OpenHands with custom tools, including API integrations and specialized functions for your workflow.",
    "code": "from openhands import Agent, Tool\n\nclass WeatherTool(Tool):\n    name = \"get_weather\"\n    description = \"Get current weather for a location\"\n    \n    def run(self, location: str):\n        # Implementation here\n        return f\"Weather data for {location}\"\n\nagent = Agent(\n    model=\"gpt-4\",\n    tools=[WeatherTool()]\n)\n\nresult = agent.run(\n    task=\"What's the weather in San Francisco?\"\n)",
    "file": "custom-tools.py"
  },
  {
    "id": "error-handling",
    "title": "Error Handling and Retries",
    "author": "OpenHands Team",
    "category": "sdk",
    "description": "Robust error handling with retries, fallbacks, and graceful degradation.",
    "code": "from openhands import Agent\nfrom openhands.exceptions import AgentError, ToolError, TimeoutError\nfrom openhands.retry import RetryPolicy\n\nretry_policy = RetryPolicy(\n    max_attempts=3,\n    backoff_factor=2,\n    retry_on=[ToolError, TimeoutError]\n)\n\nagent = Agent(\n    name=\"resilient_agent\",\n    retry_policy=retry_policy,\n    fallback_strategy=\"degrade\"\n)\n\ntry:\n    response = agent.execute(\n        \"Analyze this document and extract key points\",\n        timeout=30\n    )\nexcept AgentError as e:\n    print(f\"Agent error: {e.message}\")\n    fallback_response = agent.execute_fallback(e)\n    print(f\"Fallback response: {fallback_response}\")\nexcept TimeoutError:\n    print(\"Operation timed out, retrying with simpler approach...\")\n    response = agent.execute_simple(\"Summarize the document\")\nfinally:\n    agent.cleanup()",
    "file": "error-handling.py"
  },
  {
    "id": "memory-agent",
    "title": "Agent with Memory",
    "author": "OpenHands Team",
    "category": "sdk",
    "description": "Agent with persistent memory for context-aware conversations and learning.",
    "code": "from openhands import Agent\nfrom openhands.memory import VectorMemory, ConversationMemory\n\nvector_memory = VectorMemory(\n    storage=\"chromadb\",\n    collection=\"agent_knowledge\"\n)\n\nconversation_memory = ConversationMemory(\n    max_history=10,\n    summarize=True\n)\n\nagent = Agent(\n    name=\"memory_agent\",\n    memory=[vector_memory, conversation_memory]\n)\n\nagent.remember(\"User prefers Python over JavaScript\")\nagent.remember(\"Project deadline is next Friday\")\n\nresponse = agent.execute(\n    \"What programming language should I use for the project?\"\n)\n\ncontext = agent.recall(\"programming language preference\")\nprint(f\"Recalled context: {context}\")\nprint(f\"Response: {response.output}\")",
    "file": "memory-agent.py"
  },
  {
    "id": "multi-agent",
    "title": "Multi-Agent Collaboration",
    "author": "OpenHands Team",
    "category": "sdk",
    "description": "Coordinate multiple specialized agents to solve complex tasks through collaboration.",
    "code": "from openhands import Agent, Coordinator\n\nresearcher = Agent(\n    name=\"researcher\",\n    role=\"Research and gather information\",\n    tools=[\"web_search\", \"document_reader\"]\n)\n\ncoder = Agent(\n    name=\"coder\",\n    role=\"Write and test code\",\n    tools=[\"code_editor\", \"test_runner\"]\n)\n\nreviewer = Agent(\n    name=\"reviewer\",\n    role=\"Review and validate solutions\",\n    tools=[\"code_analyzer\", \"security_scanner\"]\n)\n\ncoordinator = Coordinator(agents=[researcher, coder, reviewer])\n\nresult = coordinator.execute(\n    task=\"Build a secure REST API with documentation\",\n    workflow=\"sequential\"\n)\n\nprint(f\"Task completed by {len(result.agents_used)} agents\")\nprint(f\"Final output: {result.output}\")",
    "file": "multi-agent.py"
  },
  {
    "id": "streaming-agent",
    "title": "Streaming Agent",
    "author": "OpenHands Team",
    "category": "sdk",
    "description": "Agent with streaming responses for real-time interaction and progress updates.",
    "code": "from openhands import Agent\nfrom openhands.streaming import StreamingHandler\n\nclass ProgressHandler(StreamingHandler):\n    def on_token(self, token):\n        print(token, end='', flush=True)\n\n    def on_complete(self, response):\n        print(f\"\\nCompleted: {response.status}\")\n\nagent = Agent(\n    name=\"streaming_agent\",\n    streaming_handler=ProgressHandler()\n)\n\nresponse = agent.execute(\n    \"Write a Python function to calculate fibonacci numbers\",\n    stream=True\n)\n\nfor chunk in response:\n    print(f\"Progress: {chunk.progress}%\")",
    "file": "streaming-agent.py"
  }
]