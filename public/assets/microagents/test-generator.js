{
  "title": "Test Generator Microagent",
  "description": "Automatically generates unit tests for JavaScript/TypeScript code with comprehensive coverage.",
  "author": "QA Automation Team",
  "category": "microagents",
  "tags": ["testing", "javascript", "typescript", "automation"],
  "createdAt": "2024-01-18T15:30:00Z",
  "updatedAt": "2024-01-26T09:45:00Z",
  "code": "/**\n * Test Generator Microagent\n * Generates comprehensive unit tests for JavaScript/TypeScript functions\n */\n\nclass TestGeneratorAgent {\n  constructor() {\n    this.testFrameworks = ['jest', 'mocha', 'vitest'];\n    this.defaultFramework = 'jest';\n  }\n\n  /**\n   * Generate test cases for a given function\n   * @param {string} functionCode - The function code to test\n   * @param {string} framework - Test framework to use\n   * @returns {string} Generated test code\n   */\n  generateTests(functionCode, framework = this.defaultFramework) {\n    const functionInfo = this.parseFunction(functionCode);\n    const testCases = this.generateTestCases(functionInfo);\n    \n    return this.formatTests(testCases, framework, functionInfo);\n  }\n\n  parseFunction(code) {\n    // Simple regex-based parsing (in production, use AST)\n    const functionMatch = code.match(/function\\s+(\\w+)\\s*\\(([^)]*)\\)/);\n    const arrowMatch = code.match(/const\\s+(\\w+)\\s*=\\s*\\(([^)]*)\\)\\s*=>/);\n    \n    const match = functionMatch || arrowMatch;\n    if (!match) throw new Error('Could not parse function');\n    \n    return {\n      name: match[1],\n      params: match[2].split(',').map(p => p.trim()).filter(Boolean),\n      code: code\n    };\n  }\n\n  generateTestCases(functionInfo) {\n    return [\n      {\n        description: `should handle normal input`,\n        input: this.generateNormalInput(functionInfo.params),\n        expected: 'expectedResult'\n      },\n      {\n        description: `should handle edge cases`,\n        input: this.generateEdgeCaseInput(functionInfo.params),\n        expected: 'expectedEdgeResult'\n      },\n      {\n        description: `should handle invalid input`,\n        input: this.generateInvalidInput(functionInfo.params),\n        expected: 'expectedError'\n      }\n    ];\n  }\n\n  generateNormalInput(params) {\n    return params.map(() => '\"normalValue\"').join(', ');\n  }\n\n  generateEdgeCaseInput(params) {\n    return params.map(() => 'null').join(', ');\n  }\n\n  generateInvalidInput(params) {\n    return params.map(() => 'undefined').join(', ');\n  }\n\n  formatTests(testCases, framework, functionInfo) {\n    const imports = framework === 'jest' ? '' : `const { expect } = require('${framework}');\\n`;\n    \n    return `${imports}describe('${functionInfo.name}', () => {\n${testCases.map(testCase => \n  `  it('${testCase.description}', () => {\n    const result = ${functionInfo.name}(${testCase.input});\n    expect(result).toBe(${testCase.expected});\n  });`\n).join('\\n\\n')}\n});`;\n  }\n}\n\n// Usage example\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = TestGeneratorAgent;\n} else {\n  // Browser environment\n  window.TestGeneratorAgent = TestGeneratorAgent;\n}\n\n// Example usage:\n// const agent = new TestGeneratorAgent();\n// const functionCode = 'function add(a, b) { return a + b; }';\n// console.log(agent.generateTests(functionCode));"
}