{
  "title": "Workspace Backup Script",
  "description": "Python script to backup OpenHands workspace with compression and cloud storage support.",
  "author": "Backup Team",
  "category": "scripts",
  "tags": ["backup", "python", "cloud", "compression"],
  "createdAt": "2024-01-14T16:00:00Z",
  "updatedAt": "2024-01-24T11:30:00Z",
  "code": "#!/usr/bin/env python3\n\"\"\"\nOpenHands Workspace Backup Script\nBackup workspace files with compression and cloud storage support\n\"\"\"\n\nimport os\nimport sys\nimport tarfile\nimport gzip\nimport shutil\nfrom datetime import datetime\nfrom pathlib import Path\nimport argparse\nimport logging\n\n# Configure logging\nlogging.basicConfig(\n    level=logging.INFO,\n    format='%(asctime)s - %(levelname)s - %(message)s'\n)\nlogger = logging.getLogger(__name__)\n\nclass WorkspaceBackup:\n    def __init__(self, workspace_path, backup_dir, compression='gzip'):\n        self.workspace_path = Path(workspace_path)\n        self.backup_dir = Path(backup_dir)\n        self.compression = compression\n        self.timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')\n        \n        # Create backup directory if it doesn't exist\n        self.backup_dir.mkdir(parents=True, exist_ok=True)\n    \n    def create_backup(self):\n        \"\"\"Create a compressed backup of the workspace.\"\"\"\n        backup_name = f\"workspace_backup_{self.timestamp}.tar.gz\"\n        backup_path = self.backup_dir / backup_name\n        \n        logger.info(f\"Creating backup: {backup_path}\")\n        \n        try:\n            with tarfile.open(backup_path, 'w:gz') as tar:\n                tar.add(self.workspace_path, arcname='workspace')\n            \n            logger.info(f\"Backup created successfully: {backup_path}\")\n            logger.info(f\"Backup size: {self._get_file_size(backup_path)}\")\n            \n            return backup_path\n            \n        except Exception as e:\n            logger.error(f\"Failed to create backup: {e}\")\n            raise\n    \n    def cleanup_old_backups(self, keep_count=5):\n        \"\"\"Remove old backup files, keeping only the most recent ones.\"\"\"\n        backup_files = list(self.backup_dir.glob('workspace_backup_*.tar.gz'))\n        backup_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)\n        \n        if len(backup_files) > keep_count:\n            for old_backup in backup_files[keep_count:]:\n                logger.info(f\"Removing old backup: {old_backup}\")\n                old_backup.unlink()\n    \n    def restore_backup(self, backup_path, restore_path):\n        \"\"\"Restore a backup to the specified path.\"\"\"\n        backup_path = Path(backup_path)\n        restore_path = Path(restore_path)\n        \n        if not backup_path.exists():\n            raise FileNotFoundError(f\"Backup file not found: {backup_path}\")\n        \n        logger.info(f\"Restoring backup {backup_path} to {restore_path}\")\n        \n        try:\n            with tarfile.open(backup_path, 'r:gz') as tar:\n                tar.extractall(restore_path)\n            \n            logger.info(\"Backup restored successfully\")\n            \n        except Exception as e:\n            logger.error(f\"Failed to restore backup: {e}\")\n            raise\n    \n    def _get_file_size(self, file_path):\n        \"\"\"Get human-readable file size.\"\"\"\n        size = file_path.stat().st_size\n        for unit in ['B', 'KB', 'MB', 'GB']:\n            if size < 1024.0:\n                return f\"{size:.1f} {unit}\"\n            size /= 1024.0\n        return f\"{size:.1f} TB\"\n\ndef main():\n    parser = argparse.ArgumentParser(description='OpenHands Workspace Backup Tool')\n    parser.add_argument('workspace', help='Path to workspace directory')\n    parser.add_argument('--backup-dir', default='./backups', help='Backup directory')\n    parser.add_argument('--keep', type=int, default=5, help='Number of backups to keep')\n    parser.add_argument('--restore', help='Restore from backup file')\n    parser.add_argument('--restore-to', help='Restore destination path')\n    \n    args = parser.parse_args()\n    \n    backup_tool = WorkspaceBackup(args.workspace, args.backup_dir)\n    \n    if args.restore:\n        if not args.restore_to:\n            logger.error(\"--restore-to is required when using --restore\")\n            sys.exit(1)\n        backup_tool.restore_backup(args.restore, args.restore_to)\n    else:\n        backup_path = backup_tool.create_backup()\n        backup_tool.cleanup_old_backups(args.keep)\n        print(f\"Backup created: {backup_path}\")\n\nif __name__ == '__main__':\n    main()"
}